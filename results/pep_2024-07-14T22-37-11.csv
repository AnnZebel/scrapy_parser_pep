number,name,status
1,PEP Purpose and Guidelines,
237,Unifying Long Integers and Integers,
234,Iterators,
241,Metadata for Python Software Packages,
235,Import on Case-Insensitive Platforms,
236,Back to the __future__,
238,Changing the Division Operator,
240,Adding a Rational Literal to Python,
239,Adding a Rational Type to Python,
230,Warning Framework,
233,Python Online Help,
8105,2024 Term Steering Council election,
229,Using Distutils to Build Python,
228,Reworking Python’s Numeric Model,
232,Function Attributes,
227,Statically Nested Scopes,
231,__findattr__(),
8104,2023 Term Steering Council election,
8103,2022 Term Steering Council election,
8101,2020 Term Steering Council election,
8102,2021 Term Steering Council election,
8100,January 2019 Steering Council election,
8015,Organization of the Python community,
8014,The Commons Governance Model,
8016,The Steering Council Model,
8013,The External Council Governance Model,
8012,The Community Governance Model,
8000,Python Language Governance Proposal Overview,
8010,The Technical Leader Governance Model,
8011,Python Governance Model Lead by Trio of Pythonistas,
8001,Python Governance Voting Process,
3333,Python Web Server Gateway Interface v1.0.1,
8002,Open Source Governance Survey,
3155,Qualified name for classes and functions,
3156,Asynchronous IO Support Rebooted: the “asyncio” Module,
3152,Cofunctions,
3154,Pickle protocol version 4,
3153,Asynchronous IO support,
3151,Reworking the OS and IO exception hierarchy,
3149,ABI version tagged .so files,
3150,Statement local namespaces (aka “given” clause),
3147,PYC Repository Directories,
3148,futures - execute computations asynchronously,
3145,Asynchronous I/O For subprocess.Popen,
3144,IP Address Manipulation Library for the Python Standard Library,
3143,Standard daemon process library,
3146,Merging Unladen Swallow into CPython,
3141,A Type Hierarchy for Numbers,
3142,Add a “while” clause to generator expressions,
3140,"str(container) should call str(item), not repr(item)",
3139,Cleaning out sys and the “interpreter” module,
3138,String representation in Python 3000,
3137,Immutable Bytes and Mutable Buffer,
3135,New Super,
3136,Labeled break and continue,
3134,Exception Chaining and Embedded Tracebacks,
3133,Introducing Roles,
3132,Extended Iterable Unpacking,
3131,Supporting Non-ASCII Identifiers,
3129,Class Decorators,
3130,Access to Current Module/Class/Function,
3127,Integer Literal Support and Syntax,
3128,BList: A Faster List-like Type,
3126,Remove Implicit String Concatenation,
3125,Remove Backslash Continuation,
3124,"Overloading, Generic Functions, Interfaces, and Adaptation",
3123,Making PyObject_HEAD conform to standard C,
3121,Extension Module Initialization and Finalization,
3122,Delineation of the main module,
3120,Using UTF-8 as the default source encoding,
3117,Postfix type declarations,
3118,Revising the buffer protocol,
3116,New I/O,
3119,Introducing Abstract Base Classes,
3115,Metaclasses in Python 3000,
3114,Renaming iterator.next() to iterator.__next__(),
3113,Removal of Tuple Parameter Unpacking,
3112,Bytes literals in Python 3000,
3110,Catching Exceptions in Python 3000,
3111,Simple input built-in in Python 3000,
3109,Raising Exceptions in Python 3000,
3107,Function Annotations,
3108,Standard Library Reorganization,
3105,Make print a function,
3106,"Revamping dict.keys(), .values() and .items()",
3104,Access to Names in Outer Scopes,
3103,A Switch/Case Statement,
3102,Keyword-Only Arguments,
3101,Advanced String Formatting,
3100,Miscellaneous Python 3.0 Plans,
3099,Things that will Not Change in Python 3000,
3003,Python Language Moratorium,
3002,Procedure for Backwards-Incompatible Changes,
801,Reserved,
3000,Python 3000,
3001,Procedure for reviewing and improving standard library modules,
2026,Calendar versioning for Python,
789,Preventing task-cancellation bugs by limiting yield in async generators,
754,IEEE 754 Floating Point Special Values,
749,Implementing PEP 649,
745,Python 3.14 Release Schedule,
746,Type checking Annotated metadata,
747,TypeExpr: Type Hint for a Type Expression,
743,Add Py_COMPAT_API_VERSION to the Python C API,
744,JIT Compilation,
742,Narrowing types with TypeIs,
741,Python Configuration C API,
740,Index support for digital attestations,
735,Dependency Groups in pyproject.toml,
738,Adding Android as a supported platform,
739,Static description file for build details of Python installations,
736,Shorthand syntax for keyword arguments at invocation,
737,C API to format a type fully qualified name,
732,The Python Documentation Editorial Board,
734,Multiple Interpreters in the Stdlib,
733,An Evaluation of Python’s Public C API,
731,C API Working Group Charter,
730,Adding iOS as a supported platform,
729,Typing governance process,
726,Module ,
728,TypedDict with Typed Extra Items,
724,Stricter Type Guards,
727,Documentation in Annotated Metadata,
725,Specifying external dependencies in pyproject.toml,
723,Inline script metadata,
722,Dependency specification for single-file scripts,
721,Using tarfile.data_filter for source distribution extraction,
718,Subscriptable functions,
714,Rename dist-info-metadata in the Simple API,
720,Cross-compiling Python packages,
719,Python 3.13 Release Schedule,
715,Disabling bdist_egg distribution uploads on PyPI,
712,Adding a “converter” parameter to dataclasses.field,
713,Callable Modules,
711,PyBI: a standard format for distributing Python Binaries,
709,Inlined comprehensions,
710,Recording the provenance of installed packages,
708,Extending the Repository API to Mitigate Dependency Confusion Attacks,
706,Filter for tarfile.extractall,
707,A simplified signature for __exit__ and __aexit__,
705,TypedDict: Read-only items,
704,Require virtual environments by default for package installers,
702,Marking deprecations using the type system,
700,Additional Fields for the Simple API for Package Indexes,
701,Syntactic formalization of f-strings,
699,Remove private dict version field added in PEP 509,
703,Making the Global Interpreter Lock Optional in CPython,
697,Limited C API for Extending Opaque Types,
696,Type Defaults for Type Parameters,
698,Override Decorator for Static Typing,
693,Python 3.12 Release Schedule,
695,Type Parameter Syntax,
694,Upload 2.0 API for Python Package Repositories,
692,Using TypedDict for more precise **kwargs typing,
691,JSON-based Simple API for Python Package Indexes,
690,Lazy Imports,
689,Unstable C API tier,
688,Making the buffer protocol accessible in Python,
687,Isolating modules in the standard library,
686,Make UTF-8 mode default,
685,Comparison of extra names for optional distribution dependencies,
682,Format Specifier for Signed Zero,
684,A Per-Interpreter GIL,
681,Data Class Transforms,
680,tomllib: Support for Parsing TOML in the Standard Library,
683,"Immortal Objects, Using a Fixed Refcount",
679,Allow parentheses in assert statements,
678,Enriching Exceptions with Notes,
676,PEP Infrastructure Process,
677,Callable Type Syntax,
674,Disallow using macros as l-values,
672,Unicode-related Security Considerations for Python,
673,Self Type,
671,Syntax for late-bound function argument defaults,
675,Arbitrary Literal String Type,
670,Convert macros to functions in the Python C API,
669,Low Impact Monitoring for CPython,
668,Marking Python base environments as “externally managed”,
664,Python 3.11 Release Schedule,
667,Consistent views of namespaces,
665,A file format to list Python dependencies for reproducibility of an application,
666,Reject Foolish Indentation,
662,Editable installs via virtual wheels,
663,"Standardizing Enum str(), repr(), and format() behaviors",
661,Sentinel Values,
660,Editable installs for pyproject.toml based builds (wheel based),
659,Specializing Adaptive Interpreter,
658,Serve Distribution Metadata in the Simple Repository API,
655,Marking individual TypedDict items as required or potentially-missing,
657,Include Fine Grained Error Locations in Tracebacks,
656,Platform Tag for Linux Distributions Using Musl,
653,Precise Semantics for Pattern Matching,
654,Exception Groups and except*,
652,Maintaining the Stable ABI,
651,Robust Stack Overflow Handling,
650,Specifying Installer Requirements for Python Projects,
649,Deferred Evaluation Of Annotations Using Descriptors,
648,Extensible customizations of the interpreter at startup,
647,User-Defined Type Guards,
646,Variadic Generics,
645,Allow writing optional types as ,
644,Require OpenSSL 1.1.1 or newer,
643,Metadata for Package Source Distributions,
641,Using an underscore in the version portion of Python 3.10 compatibility tags,
642,Explicit Pattern Syntax for Structural Pattern Matching,
640,Unused variable syntax,
639,Improving License Clarity with Better Package Metadata,
638,Syntactic Macros,
636,Structural Pattern Matching: Tutorial,
637,Support for indexing with keyword arguments,
635,Structural Pattern Matching: Motivation and Rationale,
634,Structural Pattern Matching: Specification,
633,Dependency specification in pyproject.toml using an exploded TOML table,
632,Deprecate distutils module,
631,Dependency specification in pyproject.toml based on PEP 508,
630,Isolating Extension Modules,
629,Versioning PyPI’s Simple API,
628,Add ,
627,Recording installed projects,
626,Precise line numbers for debugging and other tools.,
623,Remove wstr from Unicode,
625,Filename of a Source Distribution,
619,Python 3.10 Release Schedule,
624,Remove Py_UNICODE encoder APIs,
622,Structural Pattern Matching,
621,Storing project metadata in pyproject.toml,
620,Hide implementation details from the C API,
618,Add Optional Length-Checking To zip,
613,Explicit Type Aliases,
617,New PEG parser for CPython,
614,Relaxing Grammar Restrictions On Decorators,
616,String methods to remove prefixes and suffixes,
615,Support for the IANA Time Zone Database in the Standard Library,
612,Parameter Specification Variables,
611,The one million limit,
610,Recording the Direct URL Origin of installed distributions,
609,Python Packaging Authority (PyPA) Governance,
608,Coordinated Python release,
607,Reducing CPython’s Feature Delivery Latency,
606,Python Compatibility Version,
602,Annual Release Cycle for Python,
605,A rolling feature release stream for CPython,
603,Adding a frozenmap type to collections,
604,Allow writing union types as ,
601,Forbid return/break/continue breaking out of finally,
600,Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
599,The manylinux2014 Platform Tag,
598,Introducing incremental feature releases,
597,Add optional EncodingWarning,
596,Python 3.9 Release Schedule,
594,Removing dead batteries from the standard library,
595,Improving bugs.python.org,
592,Adding “Yank” Support to the Simple API,
593,Flexible function and variable annotations,
591,Adding a final qualifier to typing,
586,Literal Types,
589,TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
588,GitHub Issues Migration Plan,
590,Vectorcall: a fast calling protocol for CPython,
587,Python Initialization Configuration,
585,Type Hinting Generics In Standard Collections,
582,Python local packages directory,
584,Add Union Operators To dict,
581,Using GitHub Issues for CPython,
579,Refactoring C functions and methods,
583,A Concurrency Memory Model for Python,
580,The C call protocol,
578,Python Runtime Audit Hooks,
574,Pickle protocol 5 with out-of-band data,
577,Augmented Assignment Expressions,
575,Unifying function/method classes,
573,Module State Access from C Extension Methods,
576,Rationalize Built-in function classes,
571,The manylinux2010 Platform Tag,
572,Assignment Expressions,
570,Python Positional-Only Parameters,
569,Python 3.8 Release Schedule,
568,Generator-sensitivity for Context Variables,
567,Context Variables,
566,Metadata for Python Software Packages 2.1,
565,Show DeprecationWarning in __main__,
564,Add new time functions with nanosecond resolution,
563,Postponed Evaluation of Annotations,
557,Data Classes,
559,Built-in noop(),
561,Distributing and Packaging Type Information,
560,Core support for typing module and generic types,
562,Module __getattr__ and __dir__,
556,Threaded garbage collection,
558,Defined semantics for locals(),
555,Context-local variables (contextvars),
553,Built-in breakpoint(),
552,Deterministic pycs,
548,More Flexible Loop Control,
549,Instance Descriptors,
551,Security transparency in the Python runtime,
547,Running extension modules using the -m option,
550,Execution Context,
554,Multiple Interpreters in the Stdlib,
546,Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
545,Python Documentation Translations,
542,Dot Notation Assignment In Function Header,
543,A Unified TLS API for Python,
541,Package Index Name Retention,
544,Protocols: Structural subtyping (static duck typing),
540,Add a new UTF-8 Mode,
539,A New C-API for Thread-Local Storage in CPython,
537,Python 3.7 Release Schedule,
538,Coercing the legacy C locale to a UTF-8 based locale,
536,Final Grammar for Literal String Interpolation,
534,Improved Errors for Missing Standard Library Modules,
535,Rich comparison chaining,
530,Asynchronous Comprehensions,
533,Deterministic cleanup for iterators,
531,Existence checking operators,
532,A circuit breaking protocol and binary operators,
529,Change Windows filesystem encoding to UTF-8,
528,Change Windows console encoding to UTF-8,
527,Removing Un(der)used file types/extensions on PyPI,
526,Syntax for Variable Annotations,
525,Asynchronous Generators,
524,Make os.urandom() blocking on Linux,
521,Managing global context via ‘with’ blocks in generators and coroutines,
523,Adding a frame evaluation API to CPython,
522,Allow BlockingIOError in security sensitive APIs,
520,Preserving Class Attribute Definition Order,
519,Adding a file system path protocol,
518,Specifying Minimum Build System Requirements for Python Projects,
517,A build-system independent format for source trees,
515,Underscores in Numeric Literals,
516,Build system abstraction for pip/conda etc,
514,Python registration in the Windows registry,
512,Migrating from hg.python.org to GitHub,
513,A Platform Tag for Portable Linux Built Distributions,
511,API for code transformers,
510,Specialize functions with guards,
508,Dependency specification for Python Software Packages,
509,Add a private version to dict,
507,Migrate CPython to Git and GitLab,
504,Using the System RNG by default,
506,Adding A Secrets Module To The Standard Library,
505,None-aware operators,
500,A protocol for delegating datetime methods to their tzinfo implementations,
503,Simple Repository API,
502,String Interpolation - Extended Discussion,
501,General purpose string interpolation,
499,,
497,A standard mechanism for backward compatibility,
496,Environment Markers,
498,Literal String Interpolation,
495,Local Time Disambiguation,
494,Python 3.6 Release Schedule,
493,HTTPS verification migration tools for Python 2.7,
492,Coroutines with async and await syntax,
491,The Wheel Binary Package Format 1.9,
490,Chain exceptions at C level,
489,Multi-phase extension module initialization,
488,Elimination of PYO files,
486,Make the Python Launcher aware of virtual environments,
487,Simpler customisation of class creation,
485,A Function for testing approximate equality,
482,Literature Overview for Type Hints,
483,The Theory of Type Hints,
481,"Migrate CPython to Git, Github, and Phabricator",
484,Type Hints,
479,Change StopIteration handling inside generators,
480,Surviving a Compromise of PyPI: End-to-end signing of packages,
477,Backport ensurepip (PEP 453) to Python 2.7,
478,Python 3.5 Release Schedule,
476,Enabling certificate verification by default for stdlib http clients,
475,Retry system calls failing with EINTR,
473,Adding structured data to built-in exceptions,
474,Creating forge.python.org,
471,os.scandir() function – a better and faster directory iterator,
469,Migration of dict iteration code to Python 3,
472,Support for indexing with keyword arguments,
470,Removing External Hosting Support on PyPI,
468,Preserving the order of **kwargs in a function.,
467,Minor API improvements for binary sequences,
466,Network Security Enhancements for Python 2.7.x,
465,A dedicated infix operator for matrix multiplication,
464,Removal of the PyPI Mirror Authenticity API,
463,Exception-catching expressions,
460,Add binary interpolation and formatting,
458,Secure PyPI downloads with signed repository metadata,
461,Adding % formatting to bytes and bytearray,
462,Core development workflow automation for CPython,
459,Standard Metadata Extensions for Python Software Packages,
457,Notation For Positional-Only Parameters,
456,Secure and interchangeable hash algorithm,
455,Adding a key-transforming dictionary to collections,
454,Add a new tracemalloc module to trace Python memory allocations,
449,Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
452,API for Cryptographic Hash Functions v2.0,
453,Explicit bootstrapping of pip in Python installations,
450,Adding A Statistics Module To The Standard Library,
448,Additional Unpacking Generalizations,
451,A ModuleSpec Type for the Import System,
447,Add __getdescriptor__ method to metaclass,
446,Make newly created file descriptors non-inheritable,
443,Single-dispatch generic functions,
442,Safe object finalization,
445,Add new APIs to customize Python memory allocators,
441,Improving Python ZIP Application Support,
444,Python Web3 Interface,
440,Version Identification and Dependency Specification,
439,Inclusion of implicit pip bootstrap in Python installation,
437,"A DSL for specifying signatures, annotations and argument converters",
438,Transitioning to release-file hosting on PyPI,
434,IDLE Enhancement Exception for All Branches,
436,The Argument Clinic DSL,
435,Adding an Enum type to the Python standard library,
433,Easier suppression of file descriptor inheritance,
432,Restructuring the CPython startup sequence,
431,Time zone support improvements,
430,Migrating to Python 3 as the default online documentation,
429,Python 3.4 Release Schedule,
428,The pathlib module – object-oriented filesystem paths,
427,The Wheel Binary Package Format 1.0,
426,Metadata for Python Software Packages 2.0,
425,Compatibility Tags for Built Distributions,
424,A method for exposing a length hint,
423,Naming conventions and recipes related to packaging,
422,Simpler customisation of class creation,
421,Adding sys.implementation,
419,Protecting cleanup statements from interruptions,
420,Implicit Namespace Packages,
417,Including mock in the Standard Library,
418,"Add monotonic time, performance counter, and process time functions",
415,Implement context suppression with exception attributes,
416,Add a frozendict builtin type,
414,Explicit Unicode Literal for Python 3.3,
412,Key-Sharing Dictionary,
413,Faster evolution of the Python Standard Library,
408,Standard library __preview__ package,
409,Suppressing exception context,
407,New release cycle and introducing long-term support versions,
410,Use decimal.Decimal type for timestamps,
411,Provisional packages in the Python standard library,
406,Improved Encapsulation of Import State,
403,General purpose decorator clause (aka “@in” clause),
400,Deprecate codecs.StreamReader and codecs.StreamWriter,
401,BDFL Retirement,
405,Python Virtual Environments,
404,Python 2.8 Un-release Schedule,
402,Simplified Package Layout and Partitioning,
399,Pure Python/C Accelerator Module Compatibility Requirements,
398,Python 3.3 Release Schedule,
397,Python launcher for Windows,
396,Module Version Numbers,
392,Python 3.2 Release Schedule,
393,Flexible String Representation,
394,The “python” Command on Unix-Like Systems,
395,Qualified Names for Modules,
391,Dictionary-Based Configuration For Logging,
390,Static metadata for Distutils,
389,argparse - New Command Line Parsing Module,
387,Backwards Compatibility Policy,
386,Changing the version comparison module in Distutils,
383,Non-decodable Bytes in System Character Interfaces,
384,Defining a Stable ABI,
385,Migrating from Subversion to Mercurial,
381,Mirroring infrastructure for PyPI,
382,Namespace Packages,
380,Syntax for Delegating to a Subgenerator,
379,Adding an Assignment Expression,
378,Format Specifier for Thousands Separator,
376,Database of Installed Python Distributions,
375,Python 3.1 Release Schedule,
377,Allow __enter__() methods to skip the statement body,
372,Adding an ordered dictionary to collections,
373,Python 2.7 Release Schedule,
374,Choosing a distributed VCS for the Python project,
371,Addition of the multiprocessing package to the standard library,
370,Per user site-packages directory,
369,Post import hooks,
368,Standard image protocol and class,
366,Main module explicit relative imports,
367,New Super,
364,Transitioning to the Py3K Standard Library,
365,Adding the pkg_resources module,
362,Function Signature Object,
363,Syntax For Dynamic Attribute Access,
361,Python 2.6 and 3.0 Release Schedule,
359,The “make” Statement,
360,Externally Maintained Packages,
358,The “bytes” Object,
357,Allowing Any Object to be Used for Slicing,
356,Python 2.5 Release Schedule,
355,Path - Object oriented filesystem paths,
353,Using ssize_t as the index type,
354,Enumerations in Python,
352,Required Superclass for Exceptions,
351,The freeze protocol,
349,Allow str() to return unicode strings,
350,Codetags,
348,Exception Reorganization for Python 3.0,
347,Migrating the Python CVS to Subversion,
344,Exception Chaining and Embedded Tracebacks,
345,Metadata for Python Software Packages 1.2,
346,User Defined (”,
342,Coroutines via Enhanced Generators,
343,The “with” Statement,
341,Unifying try-except and try-finally,
340,Anonymous Block Statements,
336,Make None Callable,
338,Executing modules as scripts,
337,Logging Usage in the Standard Library,
339,Design of the CPython Compiler,
335,Overloadable Boolean Operators,
334,Simple Coroutines via SuspendIteration,
332,Byte vectors and String/Unicode Unification,
331,Locale-Independent Float/String Conversions,
330,Python Bytecode Verification,
329,Treating Builtins as Constants in the Standard Library,
328,Imports: Multi-Line and Absolute/Relative,
333,Python Web Server Gateway Interface v1.0,
327,Decimal Data Type,
326,A Case for Top and Bottom Values,
325,Resource-Release Support for Generators,
324,subprocess - New process module,
323,Copyable Iterators,
322,Reverse Iteration,
321,Date/Time Parsing and Formatting,
320,Python 2.4 Release Schedule,
319,Python Synchronize/Asynchronize Block,
316,Programming by Contract for Python,
317,Eliminate Implicit Exception Instantiation,
318,Decorators for Functions and Methods,
315,Enhanced While Loop,
314,Metadata for Python Software Packages 1.1,
313,Adding Roman Numeral Literals to Python,
311,Simplified Global Interpreter Lock Acquisition for Extensions,
312,Simple Implicit Lambda,
309,Partial Function Application,
310,Reliable Acquisition/Release Pairs,
307,Extensions to the pickle protocol,
308,Conditional Expressions,
306,How to Change Python’s Grammar,
305,CSV File API,
304,Controlling Generation of Bytecode Files,
301,Package Index and Metadata for Distutils,Either “success” or “fail”.
303,Extend divmod() for Multiple Divisors,
302,New Import Hooks,
299,Special __main__() function in modules,
297,Support for System Upgrades,
298,The Locked Buffer Interface,
296,Adding a bytes Object Type,
295,Interpretation of multiline string constants,
294,Type Names in the types Module,
293,Codec Error Handling Callbacks,
291,Backward Compatibility for the Python 2 Standard Library,
292,Simpler String Substitutions,
289,Generator Expressions,
288,Generators Attributes and Exceptions,
290,Code Migration and Modernization,
287,reStructuredText Docstring Format,
286,Enhanced Argument Tuples,
284,Integer for-loops,
285,Adding a bool type,
283,Python 2.3 Release Schedule,
281,Loop Counter Iteration with range and xrange,
282,A Logging System,
280,Optimizing access to globals,
279,The enumerate() built-in function,
278,Universal Newline Support,
277,Unicode file name support for Windows NT,
276,Simple Iterator for ints,
275,Switching on Multiple Values,
274,Dict Comprehensions,
273,Import Modules from Zip Archives,
272,API for Block Encryption Algorithms v1.0,
271,Prefixing sys.path by command line option,
270,uniq method for list objects,
269,Pgen Module for Python,
268,Extended HTTP functionality and WebDAV,
266,Optimizing Global Variable/Attribute Access,
267,Optimized Access to Module Namespaces,
264,Future statements in simulated shells,
265,Sorting Dictionaries by Value,
263,Defining Python Source Code Encodings,
261,Support for “wide” Unicode characters,
262,A Database of Installed Python Packages,
260,Simplify xrange(),
259,Omit printing newline after newline,
258,Docutils Design Specification,
257,Docstring Conventions,
255,Simple Generators,
254,Making Classes Look More Like Types,
256,Docstring Processing System Framework,
253,Subtyping Built-in Types,
251,Python 2.2 Release Schedule,
252,Making Types Look More Like Classes,
250,Using site-packages on Windows,
248,Python Database API Specification v1.0,
247,API for Cryptographic Hash Functions,
249,Python Database API Specification v2.0,
246,Object Adaptation,
245,Python Interface Syntax,
244,The ,
243,Module Repository Upload Mechanism,
226,Python 2.1 Release Schedule,
242,Numeric Kinds,
225,Elementwise/Objectwise Operators,
224,Attribute Docstrings,
223,Change the Meaning of ,
222,Web Library Enhancements,
220,"Coroutines, Generators, Continuations",
221,Import As,
219,Stackless Python,
218,Adding a Built-In Set Object Type,
217,Display Hook for Interactive Use,
216,Docstring Format,
214,Extended Print Statement,
215,String Interpolation,
212,Loop Counter Iteration,
211,Adding A New Outer Product Operator,
213,Attribute Access Handlers,
210,Decoupling the Interpreter Loop,
209,Multi-dimensional Arrays,
207,Rich Comparisons,
208,Reworking the Coercion Model,
206,Python Advanced Library,
204,Range Literals,
205,Weak References,
202,List Comprehensions,
203,Augmented Assignments,
201,Lockstep Iteration,
160,Python 1.6 Release Schedule,
200,Python 2.0 Release Schedule,
102,Doing Python Micro Releases,
103,Collecting information about git,
101,Doing Python Releases 101,
42,Feature Requests,
100,Python Unicode Integration,
20,The Zen of Python,
13,Python Language Governance,
12,Sample reStructuredText PEP Template,
11,CPython platform support,
10,Voting Guidelines,
9,Sample Plaintext PEP Template,
6,Bug Fix Releases,
8,Style Guide for Python Code,
7,Style Guide for C Code,
4,Deprecation of Standard Modules,
5,Guidelines for Language Evolution,
3,Guidelines for Handling Bug Reports,
2,Procedure for Adding New Modules,
